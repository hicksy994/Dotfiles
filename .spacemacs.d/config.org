#+TITLE: Emacs Configuration
#+OPTIONS: TOC:nil

This is my emacs config, written in a literate programming style in the form of an org mode document. It is (at the time of writing) split into 4 categories: Theming/Aesthetics, major modes, custom functions and miscellaneous settings.

Note that as I am using spacemacs, this is not strictly my entire emacs configuration. There is also my spacemacs init file (containing my required layers/packages and some other fundemental spacemacs settings) which can be found [[https://github.com/hicksy994/Dotfiles/blob/master/.spacemacs.d/init.el][here]] and my custom theming layer which can be found [[https://github.com/hicksy994/Dotfiles/tree/master/.spacemacs.d/layers/hicksy-theming][here]]. I would like to include my spacemacs init file in this org document as well but whilst it is theoretically possible, at the current time it would be considered bad practise because of how spacemacs loads it's layers/packages. One day I hope to make this work nicely.

* Theming/Aesthetics
  This section contains aesthetic tweaks to emacs.
** Highlighting
   I don't particularly like some of the spacemacs defaults when it comes to highlighting stuff.
*** Disable current line highlighting
#+BEGIN_SRC emacs-lisp
(setq global-hl-line-mode nil)
#+END_SRC

*** Disable smartparens highlighting
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'smartparens
  (show-smartparens-global-mode -1))
#+END_SRC

*** Disable highlighting on whitespace and new lines
#+BEGIN_SRC emacs-lisp
(setq sp-highlight-pair-overlay nil)
(setq sp-highlight-wrap-overlay nil)
(setq sp-highlight-wrap-tag-overlay nil)
(setq spacemacs-show-trailing-whitespace nil)
#+END_SRC

** Powerline
   Tweaks to the default powerline settings.
*** Separator
#+BEGIN_SRC emacs-lisp
(setq powerline-default-separator 'arrow)
#+END_SRC

*** Disable minor modes and window purpose
#+BEGIN_SRC emacs-lisp
(spaceline-toggle-minor-modes-off)
(spaceline-toggle-purpose-off)
#+END_SRC

* Major mode settings
  Here is the meaty section of my config which contains configurations for my most commonly used major modes.
** Languages
*** C/C++
**** Enable eldoc-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
(add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
#+END_SRC

**** Set style
     I like to use the "k&r" style by default. The GNU style is simply horrible.
#+BEGIN_SRC emacs-lisp
(setq c-default-style "k&r")
#+END_SRC

*** Rust
**** Autocomplete 
***** Set Racer and Rust source paths
      Racer autocomplete requires the racer executable and a copy of the rust source code.
#+BEGIN_SRC emacs-lisp
(setq racer-cmd "/usr/local/bin/racer")
(setq racer-rust-src-path "/usr/local/src/rust/src")
#+END_SRC

*** Java
**** Eclim
***** Set Eclim and Eclipse paths
      Eclim requires Eclipse and the eclim executable.
#+BEGIN_SRC emacs-lisp
(setq eclim-eclipse-dirs "/usr/lib/eclipse"
      eclim-executable "/usr/lib/eclipse/eclim")
#+END_SRC

**** Set indent width
#+BEGIN_SRC emacs-lisp
 (add-hook 'java-mode-hook (lambda ()
         (setq c-basic-offset 4)))
#+END_SRC

** Org-mode
*** Org-babel languages
    Here is the list of languages that org can execute and evaluate on the spot.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((C . t)
                             (emacs-lisp . t)
                             (haskell . t)
                             (java . t)))
#+END_SRC

*** Turn off line numbers 
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda() (linum-mode 0)))
#+END_SRC

*** Turn on text wrapping
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda() (visual-line-mode t))) 
#+END_SRC

*** Org-Capture TODO template
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  '(("t" "Todo" entry (file+headline "~/org/Todo.org" "Todo")
     "* TODO  %?")))
#+END_SRC

*** Use current window when editing a code snippet
    I think it's nicer to use the current window when editing a source block rather than splitting and making a new one.
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Conf-mode
   I edit a lot of conf files (i3 config for example) so I like to enable some modes when I am in conf-mode.
*** Enable line numbers
#+BEGIN_SRC emacs-lisp
(add-hook 'conf-mode-hook 'linum-mode)
#+END_SRC

*** Enable company-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'conf-mode-hook 'company-mode)
#+END_SRC

*** Enable smartparens-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'conf-mode-hook 'smartparens-mode)
#+END_SRC

** Term mode
*** Set keybinding for killing command
#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys-for-major-mode 'term-mode "q" 'term-kill-subjob)
#+END_SRC

*** Disable yasnippet
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
  (lambda() (setq yas-dont-activate t)))
#+END_SRC

** ERC mode
*** Set timestamp on left
    I prefer to have IRC timestamps on the left, and also for each message to be timestamped.
#+BEGIN_SRC emacs-lisp
(setq erc-timestamp-only-if-changed-flag nil
          erc-timestamp-format "%H:%M "
          erc-fill-prefix "      "
          erc-insert-timestamp-function 'erc-insert-timestamp-left)
#+END_SRC
*** Set length of lines before they get wrapped
#+BEGIN_SRC emacs-lisp
  (setq erc-fill-column 115)
#+END_SRC
*** Disable powerline tracking
    Whilst this is potentially a nice feature, I don't like my powerline getting all messy from IRC channels.
#+BEGIN_SRC emacs-lisp
(setq spaceline-erc-track-p nil)
#+END_SRC

*** Hide some stuff
    Hides all the messages saying someone has joined or left the room.
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

* Functions
  This is where my custom emacs-lisp functions are defined and keybindings set.
** Open todo file 
*** Define "open-todo" 
#+BEGIN_SRC emacs-lisp
  (defun open-todo()
    "Open my todo.org file."
    (interactive)
    (find-file-existing "~/org/Todo.org"))
#+END_SRC

*** Set keybinding for "open-todo" 
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC a o T") 'open-todo)
#+END_SRC

** Kill buffer and window 
   Very often a buffer will open itself in a new window to the right of the current one (magit-status for example). Usually when this happens I only wan't to quickly interact with this buffer and then close it again, so I like the option of killing both the buffer and the window so I don't have to do both steps when this situation occurs.
*** Define "kill-buffer-and-window" 
#+BEGIN_SRC emacs-lisp
  (defun kill-buffer-and-window()
    "Kill the current buffer and the current window."
    (interactive)
    (image-dired-kill-buffer-and-window))
#+END_SRC

*** Set keybinding for "kill-buffer-and-window" 
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC b D") 'kill-buffer-and-window)
#+END_SRC

** Find dotfile
   As I am using a .spacemacs.d/ setup rather than a single .spacemacs file, I need emacs to know my dotfile has moved.
*** Define "spacemacs/find-dotfile
#+BEGIN_SRC emacs-lisp
  (defun spacemacs/find-dotfile()
    "Open my dotfile."
    (interactive)
    (find-file-existing "~/.spacemacs.d/init.el"))
#+END_SRC

** Find config file
   This function just finds and opens this file.
*** Define "find-config-file"
#+BEGIN_SRC emacs-lisp
  (defun find-config-file()
    "Open my config.org file."
    (interactive)
    (find-file-existing "~/.spacemacs.d/config.org"))
#+END_SRC

*** Set keybinding for "find-config-file" 
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "SPC f e c") 'find-config-file)
#+END_SRC

* Misc
  Here are some miscellaneous settings that don't belong anywhere else. They are mostly self explanatory.
** Set evil escape keymap to jk
#+BEGIN_SRC emacs-lisp
(setq-default evil-escape-key-sequence "jk")
#+END_SRC

** Turn on truncate lines mode globally
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)
#+END_SRC

** Keep git info on modeline up to date
#+BEGIN_SRC emacs-lisp
(setq auto-revert-check-vc-info t)
#+END_SRC

** Disable lockfile creation
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** Disable evil shift rounding
#+BEGIN_SRC emacs-lisp
(setq-default evil-shift-round 'nil)
#+END_SRC

** Set default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome-stable")
#+END_SRC

** Set some useless buffers
   There are many buffers that I do not want to see in my helm buffer list. These are typically buffers that open themselves up because they are needed for something else, but I rarely would ever want to view/edit the actual buffer that opens.
*** Helm
#+BEGIN_SRC emacs-lisp
(setq spacemacs-useless-buffers-regexp '("\\*helm\.\+\\*"))
#+END_SRC

*** Flycheck errors
#+BEGIN_SRC emacs-lisp
(push "\\*Flycheck error messages\\*" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"\\*Flycheck error messages\\*"))
#+END_SRC

*** FAQ.org
#+BEGIN_SRC emacs-lisp
(push "FAQ.org" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"FAQ.org"))
#+END_SRC

*** Help
#+BEGIN_SRC emacs-lisp
(push "\\*Help\\*" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"\\*Help\\*"))
#+END_SRC

*** Magit-process
#+BEGIN_SRC emacs-lisp
(push "\\*magit-process" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"\\*magit-process"))
#+END_SRC

*** Todo archive
#+BEGIN_SRC emacs-lisp
(push "Todo.org_archive" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"Todo.org_archive"))
#+END_SRC

*** Eclim
#+BEGIN_SRC emacs-lisp
(push "\\*eclimd\\*" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"\\*eclimd\\*"))
(push "\\*eclimd: problems\\*" spacemacs-useless-buffers-regexp)
(with-eval-after-load 'helm (add-to-list 'helm-boring-buffer-regexp-list '"\\*eclimd: problems\\*"))
#+END_SRC

