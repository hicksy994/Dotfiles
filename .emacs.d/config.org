#+Title: Emacs Config

* Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

* Themes
** Set Varaiable for easily choosing theme
#+BEGIN_SRC emacs-lisp
(setq my-theme 'gruvbox)
#+END_SRC
** Monokai
 #+BEGIN_SRC emacs-lisp
   (cond ((string= my-theme 'monokai)
          (use-package monokai-theme
            :ensure t
            :config
            (load-theme 'monokai t)
            (custom-theme-set-faces
             'monokai
          
             '(header-line ((t (:background "#272822" :box nil))))
             '(mode-line-inactive ((t (:foreground "#F8F8F0" :background "#49483E" :box (:line-width 1 :color "#64645E")))))
             '(powerline-inactive1 ((t (:foreground "#F8F8F0" :background "#35331D"))))
             '(powerline-inactive2 ((t (:foreground "#F8F8F0" :background "#272822"))))
    
             '(show-paren-match ((t (:foreground "#ff0000"))))
          
             '(company-tooltip-common ((t (:underline nil))))
             '(company-preview-common ((t (:underline nil))))
             '(company-tooltip-common-selection ((t (:underline nil))))
          
             '(linum ((t (:foreground "#75715E" :background "#272822" :weight normal))))
             '(linum-relative-current-face ((t (:foreground "#75715E" :background "#272822" :weight normal))))
          
             '(flycheck-error((t (:underline (:color "#ff0000" :style wave )))))
             '(flycheck-warning((t (:underline (:color "#ffff00" :style wave)))))
          
             '(eclim-problems-highlight-error-face((t (:underline (:color "#ff0000" :style wave)))))
             '(eclim-problems-highlight-warning-face((t (:underline (:color "#ffff00" :style wave)))))
          
             '(ivy-minibuffer-match-face-2((t (:foreground "#9257FF" :underline t))))

             '(org-block-begin-line ((t (:foreground "#75715E" :background "#272822"))))
             '(org-block((t (:background "#272822"))))
             '(org-block-end-line ((t (:foreground "#75715E" :background "#272822")))))))
 #+END_SRC

** Gruvbox
#+BEGIN_SRC emacs-lisp
  ((string= my-theme 'gruvbox)
   (use-package gruvbox-theme
     :ensure t
     :config
     (load-theme 'gruvbox t)
     (custom-theme-set-faces
      'gruvbox

      '(header-line ((t(:background "#282828"))))
      '(mode-line ((t(:foreground "#d5c4a1" :background "#504945" :weight bold))))
      '(mode-line-inactive ((t(:background "#3c3836" :foreground "#a89984" :weight bold))))
      '(powerline-active1 ((t(:foreground "#d5c4a1" :background "grey22" :weight bold))))
      '(powerline-inactive1 ((t(:background "grey11" :weight bold))))
      '(powerline-active2 ((t(:foreground "#d5c4a1" :background "grey40" :weight bold))))
      '(powerline-inactive2 ((t(:background "grey20" :weight bold))))

      '(company-preview ((t(:background "#504945"))))
      '(company-tooltip-common ((t(:underline nil))))
      '(company-preview-common ((t(:underline nil))))
      '(company-tooltip-common-selection ((t(:underline nil))))

      '(org-block-begin-line ((t(:foreground "#7c6f64"))))
      '(org-block ((t(:foreground "#fdf4c1"))))
      '(org-block-end-line ((t(:foreground "#7c6f64"))))

      '(erc-prompt-face ((t(:background "#282828" :foreground "Green"))))
      '(erc-input-face ((t(:foreground "#fe8019"))))

      '(show-paren-match ((t (:foreground "#ff0000" :background "#282828"))))

      '(ivy-current-match((t (:background "#504945"))))

      '(linum ((t(:background "#282828" :foreground "#7c6f64" :weight normal))))
      '(linum-relative-current-face ((t(:background "#282828" :foreground "#7c6f64" :weight normal)))))))
#+END_SRC

** Dracula
#+BEGIN_SRC emacs-lisp
  ((string= my-theme 'dracula)
   (use-package dracula-theme
     :ensure t
     :config
     (load-theme 'dracula t)
     (custom-theme-set-faces
      'dracula
      ))))
#+END_SRC

** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    ;; (setq powerline-default-separator 'nil)
    (spaceline-emacs-theme)
    (spaceline-helm-mode t)
    (spaceline-info-mode t)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-purpose-off)
    (spaceline-toggle-buffer-size-off)
#+END_SRC

  Set the status colour to be based off the current evil-state.
#+BEGIN_SRC emacs-lisp
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (use-package evil-magit
      :ensure t)
    (setq auto-revert-check-vc-info t))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode)
    (setq ivy-height 10)
    (setq ivy-count-format "")
    (setq ivy-use-virtual-buffers t)
    (setq ivy-virtual-abbreviate 'full)
    (setq helm-make-completion-method 'ivy)
    (setq ivy-extra-directories 'nil)
    (setq projectile-completion-system 'ivy)
    (setq ivy-ignore-buffers '("\\` "
                               "\\`\\*magit-process"
                               "\\`\\*magit-diff"
                               "\\`\\*Flycheck"
                               "\\`\\*Shell Command Output"
                               "\\`\\*rdm"
                               "\\`\\*RTags Log")))

    (use-package counsel
      :ensure t
      :config
      (setq counsel-find-file-ignore-regexp "^build/"))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-on))

    (use-package swiper
      :ensure t)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (setq-default company-require-match 'nil))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :config
    (use-package helm-projectile
      :ensure t
      :config (setq helm-make-build-dir "build/debug"))
    (projectile-mode))
#+END_SRC

* Org
** Todo/Agenda
Set location of agenda files.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/"))

  (use-package ivy-todo
    :ensure t
    :config (setq ivy-todo-file "~/org/Todo.org"))
#+END_SRC

** Capture
Create custom capture templates.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file"~/org/Todo.org")
           "* TODO %?  %i\n  %a")))
#+END_SRC

Open capture in insert mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

** Misc
Use org bullets package to get pretty bullets.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

Enable syntax highlighting for org-mode source blocks.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Edit source block in current window rather than splitting.
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Set all headings to be the same height/weight.
#+BEGIN_SRC emacs-lisp
  (defun my/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC

Set applications for running stuff.
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                       ("\\.mm\\'" . default)
                       ("\\.x?html?\\'" . "google-chrome-stable %s")
                       ("\\.pdf\\'" . "zathura %s")))
#+END_SRC

Turn on visual line mode in org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda() (visual-line-mode)))
#+END_SRC

Show inline images
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC

* C/C++
** Packages
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :defer t)

  (use-package cmake-mode
    :ensure t
    :defer t)

  (use-package rtags
    :ensure t)

  (use-package cmake-ide
    :ensure t
    :config
    (require 'rtags)
    (cmake-ide-setup)
    (setq cmake-ide-build-dir "~/projects/c/jcc/build/debug"))

  (use-package company-c-headers
    :ensure t
    :config (add-to-list 'company-backends 'company-c-headers))

  (use-package c-eldoc
    :ensure t
    :defer t
    :config 
    (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
    (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode))

  (use-package bison-mode
    :ensure t
    :defer t)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  ;;Create function for setting the build dir on the fly
  (defun set-cmake-ide-build-dir()
    "Set the cmake-ide build directory"
    (interactive)
    (let ((build-directory (read-directory-name "Select build directory: ")))
      (setq cmake-ide-build-dir build-directory)
      (message (concat "cmake build directory set to " build-directory))))

  (add-hook 'c-mode-hook (lambda() (flycheck-mode)))
  (add-hook 'c++-mode-hook (lambda() (flycheck-mode)))

  (add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                          comment-end   "")))
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t)
    (setq rust-rustfmt-bin "~/.cargo/bin/rustfmt"))

  (use-package cargo
    :ensure t
    :defer t)

  (use-package racer
    :ensure t
    :defer t
    :config
    (setq racer-cmd "/usr/local/bin/racer")
    (setq racer-rust-src-path "/usr/local/src/rust/src"))

  (use-package company-racer
    :ensure t
    :config
    (add-to-list 'company-backends 'company-racer))

  (use-package flycheck-rust
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    (add-hook 'rust-mode-hook (lambda() (flycheck-mode))))
#+END_SRC

* Java
** Eclim
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :config
    (setq eclim-eclipse-dirs "/usr/lib/eclipse"
          eclim-executable "/usr/lib/eclipse/eclim")
    (use-package company-emacs-eclim
      :ensure t
      :config (company-emacs-eclim-setup)
    (add-hook 'java-mode-hook (lambda() (eclim-mode)))))
#+END_SRC

** Gradle
#+BEGIN_SRC emacs-lisp
  (use-package gradle-mode
    :ensure t
    :config
    (use-package groovy-mode
      :ensure t)
    (add-hook 'java-mode-hook (lambda() (gradle-mode))))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda() (c-set-style "java")))

#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (use-package ghc
      :ensure t
      :config
      (autoload 'ghc-init "ghc" nil t)
      (autoload 'ghc-debug "ghc" nil t)
      (add-hook 'haskell-mode-hook (lambda () (ghc-init))))

    (use-package company-ghc
      :ensure t
      :config (add-to-list 'company-backends '(company-ghc :with company-dabbrev-code)))

    (use-package flycheck-haskell
      :ensure t
      :config
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

      (add-hook 'haskell-mode-hook (lambda () (flycheck-mode))))

    (use-package helm-ghc
      :ensure t)

    (setq haskell-interactive-popup-errors 'nil)

    ;;Stop the repl getting stuck
    (add-hook 'haskell-interactive-mode-hook
              (lambda ()
                (setq-local evil-move-cursor-back nil))))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (yas-global-mode 1))
#+END_SRC

* ERC
  Set the timestamp to be on the left and set every message to be timestamped
#+BEGIN_SRC emacs-lisp
  (setq erc-timestamp-only-if-changed-flag nil
            erc-timestamp-format "%H:%M "
            erc-fill-prefix "      "
            erc-insert-timestamp-function 'erc-insert-timestamp-left)
#+END_SRC

  Hide messages about people joining/leaving the room
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

  Set length of lines before they are split
#+BEGIN_SRC emacs-lisp
  (setq erc-fill-column 225)
#+END_SRC

* Misc
** Fonts
   Set default font.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka-13")
  (set-frame-font "Iosevka-13" nil t)
#+END_SRC

** Safe Local Variables
#+BEGIN_SRC emacs-lisp
  (put 'helm-make-build-dir 'safe-local-variable 'stringp)
#+END_SRC
** Recentf
#+BEGIN_SRC emacs-lisp
  (setq recentf-exclude '("^/var/folders\\.*"
                          "COMMIT_EDITMSG\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]\\.elpa/"
                          ))
  (recentf-mode 1)
  (setq recentf-max-saved-items 100)
#+END_SRC

** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC

** Compilation
   Use ANSI colours in compilation.
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

   Scroll to first error
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

   Remove some unused keybindings in compilation mode.
#+BEGIN_SRC emacs-lisp
  (define-key compilation-mode-map (kbd "g") 'nil)
  (define-key compilation-mode-map (kbd "h") 'nil)
#+END_SRC
   
** Popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (popwin-mode)
    (setq popwin:popup-window-height 25))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (use-package evil-smartparens
      :ensure t
      :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+END_SRC

   Remove "'" pair in emacs-lisp mode.
#+BEGIN_SRC emacs-lisp
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
#+END_SRC

   Disable highlighting in pairs.
#+BEGIN_SRC emacs-lisp
  (setq sp-highlight-pair-overlay nil)
  (setq sp-highlight-wrap-overlay nil)
  (setq sp-highlight-wrap-tag-overlay nil)
#+END_SRC

   Insert a new line and indent after opening brace.
#+BEGIN_SRC emacs-lisp
  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-pair "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
#+END_SRC 

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'linum-relative-mode)
    (add-hook 'conf-mode-hook 'linum-relative-mode)
    (setq linum-relative-current-symbol ""))
#+END_SRC

** Default Style
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
#+END_SRC

** Help in echo area
#+BEGIN_SRC emacs-lisp
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.1)
  (help-at-pt-set-timer)
#+END_SRC

** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (do-smooth-scroll))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.5))
#+END_SRC

** Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Set Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome-stable")
#+END_SRC

** Scratch Buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message '"")
#+END_SRC

** Open Todo file on startup
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice "~/org/Todo.org")
#+END_SRC

** Disable lockfile/backup file creation
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
#+END_SRC

** Prevent emacs asking about running processes when quitting   
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
    "Prevent annoying \"Active processes exist\" query when you quit Emacs."
    (cl-letf (((symbol-function #'process-list) (lambda ())))
      ad-do-it))
#+END_SRC

* Keybindings
I keep my keybindings in a seperate file, keys.org
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/keys.org")
#+END_SRC
