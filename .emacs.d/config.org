#+Title: Emacs Config

* Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

* Themes
** Set Varaiable for easily choosing theme
#+BEGIN_SRC emacs-lisp
(setq my-theme 'gruvbox)
#+END_SRC
** Monokai
 #+BEGIN_SRC emacs-lisp
   (cond ((string= my-theme 'monokai)
          (use-package monokai-theme
            :ensure t
            :config
            (load-theme 'monokai t)
            (custom-theme-set-faces
             'monokai
          
             '(header-line ((t (:background "#272822" :box nil))))
             '(mode-line-inactive ((t (:foreground "#F8F8F0" :background "#49483E" :box (:line-width 1 :color "#64645E")))))
             '(powerline-inactive1 ((t (:foreground "#F8F8F0" :background "#35331D"))))
             '(powerline-inactive2 ((t (:foreground "#F8F8F0" :background "#272822"))))
    
             '(show-paren-match ((t (:foreground "#ff0000"))))
          
             '(company-tooltip-common ((t (:underline nil))))
             '(company-preview-common ((t (:underline nil))))
             '(company-tooltip-common-selection ((t (:underline nil))))
          
             '(linum ((t (:foreground "#75715E" :background "#272822" :weight normal))))
             '(linum-relative-current-face ((t (:foreground "#75715E" :background "#272822" :weight normal))))
          
             '(flycheck-error((t (:underline (:color "#ff0000" :style wave )))))
             '(flycheck-warning((t (:underline (:color "#ffff00" :style wave)))))
          
             '(eclim-problems-highlight-error-face((t (:underline (:color "#ff0000" :style wave)))))
             '(eclim-problems-highlight-warning-face((t (:underline (:color "#ffff00" :style wave)))))
          
             '(ivy-minibuffer-match-face-2((t (:foreground "#9257FF" :underline t))))

             '(org-block-begin-line ((t (:foreground "#75715E" :background "#272822"))))
             '(org-block((t (:background "#272822"))))
             '(org-block-end-line ((t (:foreground "#75715E" :background "#272822")))))))
 #+END_SRC

** Gruvbox
#+BEGIN_SRC emacs-lisp
  ((string= my-theme 'gruvbox)
   (use-package gruvbox-theme
     :ensure t
     :config
     (load-theme 'gruvbox t)
     (custom-theme-set-faces
      'gruvbox

      '(header-line ((t(:background "#282828"))))
      '(mode-line-inactive ((t(:foreground "#d5c4a1" :background "#504945"))))
      '(powerline-active1 ((t(:foreground "#d5c4a1" :background "grey22"))))
      '(powerline-inactive1 ((t(:foreground "#d5c4a1" :background "grey22"))))
      '(powerline-active2 ((t(:foreground "#d5c4a1" :background "grey40"))))
      '(powerline-inactive2 ((t(:foreground "#d5c4a1" :background "grey40"))))

      '(company-preview ((t(:background "#504945"))))
      '(company-tooltip-common ((t(:underline nil))))
      '(company-preview-common ((t(:underline nil))))
      '(company-tooltip-common-selection ((t(:underline nil))))

      '(org-block-begin-line ((t(:foreground "#7c6f64"))))
      '(org-block ((t(:foreground "#fdf4c1"))))
      '(org-block-end-line ((t(:foreground "#7c6f64"))))

      '(show-paren-match ((t (:foreground "#ff0000" :background "#282828"))))

      '(ivy-current-match((t (:background "#504945"))))

      '(linum ((t(:background "#282828" :foreground "#7c6f64" :weight normal))))
      '(linum-relative-current-face ((t(:background "#282828" :foreground "#7c6f64" :weight normal)))))))
#+END_SRC

** Dracula
#+BEGIN_SRC emacs-lisp
  ((string= my-theme 'dracula)
   (use-package dracula-theme
     :ensure t
     :config
     (load-theme 'dracula t)
     (custom-theme-set-faces
      'dracula
      ))))
#+END_SRC

** Spaceline
  An excellent powerline-based mode line.
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator "slant")
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode t)
    (spaceline-info-mode t)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-purpose-off)
#+END_SRC

  Set the status colour to be based off the current evil-state.
#+BEGIN_SRC emacs-lisp
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (use-package evil-magit
      :ensure t)
    (setq auto-revert-check-vc-info t))
#+END_SRC

* Keybindings
** Evil
  Config for evil-mode and related packages.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config 
#+END_SRC

  Set evil escape key, using the evil-escape package.
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :config
    (evil-escape-mode)
    (setq evil-escape-key-sequence "jk"))
#+END_SRC

  Disable evil shift rounding.
#+BEGIN_SRC emacs-lisp
  (setq-default evil-shift-round 'nil)
#+END_SRC

  Easy commenting with evil-commentary.
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :config (evil-commentary-mode))
#+END_SRC

  Finally enable evil-mode.
#+BEGIN_SRC emacs-lisp
  (evil-mode))
#+END_SRC

** Functions
   Define some functions to help with setting keybindings
#+BEGIN_SRC emacs-lisp
  (defun open-config-file()
    "Open my config file"
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun kill-buffer-and-window ()
    "Kill the current buffer and window in one step"
    (interactive)
    (kill-this-buffer)
    (evil-window-delete))
#+END_SRC

** General
General helps assign leader keys for different modes

#+BEGIN_SRC emacs-lisp
  (setq my-leader "SPC")
  ;;Unbind space and comma in some maps so I can use them as leaders
  (define-key evil-motion-state-map (kbd ",") 'nil)
  (define-key evil-motion-state-map (kbd "SPC") 'nil)
  (define-key magit-status-mode-map (kbd "SPC") 'nil)
  (define-key magit-revision-mode-map (kbd "SPC") 'nil)
  (define-key magit-log-mode-map (kbd "SPC") 'nil)
  (setq my-major-mode-leader ",")
  (use-package general
    :ensure t
    :config
    (setq general-default-keymaps '(evil-normal-state-map))
    (general-define-key :prefix my-leader
                        "!" 'shell-command
                        "g" 'magit-status
                        "bd" 'kill-this-buffer
                        "fc" 'open-config-file
                        "TAB" 'evil-buffer
                        "bD" 'kill-buffer-and-window))
#+END_SRC

** Misc Keybindings
   Splitting and focusing in one step.
#+BEGIN_SRC emacs-lisp
  (defun evil-window-vsplit-and-focus ()
    "Split window vertically and move right to focus it"
    (interactive)
    (evil-window-vsplit)
    (other-window 1))

  (defun evil-window-split-and-focus ()
    "Split window vertically and move right to focus it"
    (interactive)
    (evil-window-split)
    (other-window 1))

  (define-key evil-normal-state-map (kbd "C-w C-v") 'evil-window-vsplit-and-focus)
  (define-key evil-normal-state-map (kbd "C-w C-s") 'evil-window-split-and-focus)

#+END_SRC

   Indent from normal mode.
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "TAB") 'c-indent-line-or-region)
#+END_SRC

* Helm and Ivy
Create and set variable for switching between helm/ivy
#+BEGIN_SRC emacs-lisp
  (setq my-completion-framework 'ivy)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (cond ((string= my-completion-framework 'helm)
    (use-package helm
      :ensure t
      :config
      (helm-mode)
    
#+END_SRC
*** Appearance
 #+BEGIN_SRC emacs-lisp

     (setq helm-display-header-line nil)
     (helm-autoresize-mode)
     (setq helm-autoresize-max-height 30)
     (setq helm-autoresize-min-height 30)
 #+END_SRC
*** Set boring buffers
 #+BEGIN_SRC emacs-lisp
     (add-to-list 'helm-boring-buffer-regexp-list "\\`\\*Help")
     (add-to-list 'helm-boring-buffer-regexp-list "\\`\\*Flycheck")
     (add-to-list 'helm-boring-buffer-regexp-list "\\`\\*magit-process")
     (add-to-list 'helm-boring-buffer-regexp-list "\\`\\*magit-diff")
 #+END_SRC
*** Use other related packages
 #+BEGIN_SRC emacs-lisp
   (use-package helm-describe-modes
     :ensure t
     :config (global-set-key [remap describe-mode] #'helm-describe-modes))

   (use-package helm-ag
     :ensure t)

   (use-package helm-swoop
     :ensure t
     :config)

   (use-package helm-make
     :ensure t)
 #+END_SRC

*** Keybindings
 #+BEGIN_SRC emacs-lisp
   (general-define-key :prefix my-leader
                       "ff" 'helm-find-files
                       "pp" 'helm-projectile
                       "pf" 'helm-projectile-find-file
                       "s" 'helm-swoop-without-pre-input
                       "bb" 'helm-mini)

   (global-set-key (kbd "M-x") 'helm-M-x)
   (define-key helm-map (kbd "C-j") 'helm-next-line)
   (define-key helm-map (kbd "C-k") 'helm-previous-line)
   (define-key helm-find-files-map (kbd "C-h") 'helm-find-files-up-one-level)
   (define-key helm-find-files-map (kbd "C-l") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "C-l") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "C-h") 'helm-find-files-up-one-level)
   (define-key helm-read-file-map (kbd "C-l") 'helm-execute-persistent-action)
   (define-key helm-read-file-map (kbd "C-h") 'helm-find-files-up-one-level)
   (define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
   (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)))
 #+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
  ((string= my-completion-framework 'ivy)
    (use-package ivy
      :ensure t
      :config
      (ivy-mode)
      (setq ivy-height 10)
      (setq ivy-count-format "")
      (setq ivy-use-virtual-buffers t)
      (setq ivy-virtual-abbreviate 'full)
      (setq helm-make-completion-method 'ivy)
      (setq ivy-extra-directories 'nil)
      (setq projectile-completion-system 'ivy)
      (setq ivy-ignore-buffers '("\\` "
                                 "\\`\\*magit-process"
                                 "\\`\\*magit-diff"
                                 "\\`\\*Flycheck"
                                 "\\`\\*Shell Command Output"
                                 "\\`\\*rdm"
                                 "\\`\\*RTags Log"))

      (use-package counsel
        :ensure t)
      (use-package counsel-projectile
        :ensure t
        :config
        (counsel-projectile-on))
      (use-package swiper
        :ensure t)

      (general-define-key :prefix my-leader
                          "ff" 'counsel-find-file
                          "pp" 'counsel-projectile
                          "pf" 'counsel-projectile-find-file
                          "ps" 'counsel-projectile-ag
                          "s" 'swiper
                          "bb" 'ivy-switch-buffer
                          "bw" 'ivy-switch-buffer-other-window)

      (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (define-key ivy-minibuffer-map (kbd "C-h") 'counsel-up-directory)
      (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-partial-or-done)
      (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line))))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (setq-default company-require-match 'nil))

  (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "TAB") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)

  (defun completing-dot()
    "Insert a dot and then show completions"
    (interactive "*")
    (company-abort)
    (insert ".")
    (company-complete))

  ;; For some reason doing this for prog-mode-map doesn't work, so you have to do this...

  (evil-define-key 'insert java-mode-map
    (kbd ".") 'completing-dot)

  (evil-define-key 'insert haskell-mode-map
    (kbd ".") 'completing-dot)

  (evil-define-key 'insert c++-mode-map
    (kbd ".") 'completing-dot)
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :config
    (use-package helm-projectile
      :ensure t)
    (projectile-mode))
#+END_SRC

* Org
** Todo/Agenda
Set location of agenda files.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/"))
#+END_SRC

Open agenda in current window.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

Add some custom todo states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO" "WAITING" "IN-PROGRESS" "|" "DONE")))
  (setq org-todo-keyword-faces '(("WAITING" . "deepskyblue1") ("IN-PROGRESS" . "yellow")))
#+END_SRC
** Capture
Create custom capture templates.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file"~/org/Todo.org")
           "* TODO %?  %i\n  %a")))
#+END_SRC

Open capture in insert mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

** Misc
Use org bullets package to get pretty bullets.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

Enable syntax highlighting for org-mode source blocks.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Edit source block in current window rather than splitting.
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Use evil-org-mode for nice evil keybindings in org-mode.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
  (use-package evil-org
    :ensure t)
#+END_SRC

Enter in normal mode to open links
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map
    (kbd "RET") 'org-open-at-point)
#+END_SRC

Set all headings to be the same height/weight.
#+BEGIN_SRC emacs-lisp
  (defun my/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC

Set applications for running stuff.
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                       ("\\.mm\\'" . default)
                       ("\\.x?html?\\'" . "google-chrome-stable %s")
                       ("\\.pdf\\'" . "zathura %s")))
#+END_SRC

Turn on visual line mode in org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda() (visual-line-mode)))
#+END_SRC

* C/C++
** Packages
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :defer t)

  (use-package cmake-mode
    :ensure t
    :defer t)

  (use-package rtags
    :ensure t)

  (use-package cmake-ide
    :ensure t
    :config
    (require 'rtags)
    (cmake-ide-setup)
    (setq cmake-ide-build-dir "build/"))

  (use-package company-c-headers
    :ensure t
    :config (add-to-list 'company-backends 'company-c-headers))

  (use-package c-eldoc
    :ensure t
    :defer t
    :config 
    (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
    (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-major-mode-leader
                      :keymaps '(c-mode-map c++-mode-map)
                      "cc" 'helm-make-projectile
                      "cm" 'cmake-ide-run-cmake
                      "gg" 'rtags-find-symbol-at-point
                      "ga" 'projectile-find-other-file
                      "gA" 'projectile-find-other-file-other-window)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda() (flycheck-mode)))
#+END_SRC

* Java
** Packages
   Setup Eclim.
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :config
    (setq eclim-eclipse-dirs "/usr/lib/eclipse"
          eclim-executable "/usr/lib/eclipse/eclim")
    (use-package company-emacs-eclim
      :ensure t
      :config (company-emacs-eclim-setup)
    (add-hook 'java-mode-hook (lambda() (eclim-mode)))))
#+END_SRC


  Setup Gradle.
#+BEGIN_SRC emacs-lisp
  (use-package gradle-mode
    :ensure t
    :config
    (use-package groovy-mode
      :ensure t)
    (add-hook 'java-mode-hook (lambda() (gradle-mode))))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-major-mode-leader
                      :keymaps 'java-mode-mapk
                      "cc" 'gradle-build
                      "cx" 'gradle-execute
                      "ct" 'gradle-test
                      "ds" 'start-eclimd
                      "dk" 'stop-eclimd
                      "ec" 'eclim-problems-correct
                      "eb" 'eclim-problems
                      "gg" 'eclim-java-find-declaration)
#+END_SRC
  
** Misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda() (c-set-style "java")))

#+END_SRC

* Haskell
** Packages
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :defer t
    :config
    (use-package ghc
      :ensure t
      :config
      (autoload 'ghc-init "ghc" nil t)
      (autoload 'ghc-debug "ghc" nil t)
      (add-hook 'haskell-mode-hook (lambda () (ghc-init))))
    (use-package company-ghc
      :ensure t
      :config (add-to-list 'company-backends 'company-ghc))
    (use-package company-ghci
      :ensure t
      :config (add-to-list 'company-backends 'company-ghci))
    (use-package flycheck-haskell
      :ensure t
      :config
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)))
    (use-package helm-ghc
      :ensure t)
    (use-package helm-ghc
      :ensure t)

    (add-hook 'haskell-mode-hook (lambda () (flycheck-mode)))

    (setq haskell-interactive-popup-errors 'nil)

    ;;Stop the repl getting stuck
    (add-hook 'haskell-interactive-mode-hook
              (lambda ()
                (setq-local evil-move-cursor-back nil))))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

* ERC
  Set the timestamp to be on the left and set every message to be timestamped
#+BEGIN_SRC emacs-lisp
  (setq erc-timestamp-only-if-changed-flag nil
            erc-timestamp-format "%H:%M "
            erc-fill-prefix "      "
            erc-insert-timestamp-function 'erc-insert-timestamp-left)
#+END_SRC

  Hide messages about people joining/leaving the room
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

  Set length of lines before they are split
#+BEGIN_SRC emacs-lisp
  (setq erc-fill-column 200)
#+END_SRC

* Misc
** Fonts
   Set default font.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Roboto Mono for Powerline")
  (set-frame-font "Roboto Mono for Powerline" nil t)
#+END_SRC

** Safe Local Variables
#+BEGIN_SRC emacs-lisp
  (put 'helm-make-build-dir 'safe-local-variable 'stringp)
#+END_SRC
** Recentf
#+BEGIN_SRC emacs-lisp
  (setq recentf-exclude '("^/var/folders\\.*"
                          "COMMIT_EDITMSG\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]\\.elpa/"
                          ))
  (recentf-mode 1)
#+END_SRC

** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC

** Compilation

   Use ANSI colours in compilation.
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

   Scroll to first error
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

   Remove some unused keybindings in compilation mode.
#+BEGIN_SRC emacs-lisp
  (define-key compilation-mode-map (kbd "g") 'nil)
  (define-key compilation-mode-map (kbd "h") 'nil)
  (define-key compilation-mode-map (kbd "SPC") 'nil)
  (general-define-key :prefix my-leader
                      :keymaps '(compilation-mode-map)
                      "!" 'shell-command
                      "g" 'magit-status
                      "bd" 'kill-this-buffer
                      "fc" 'open-config-file
                      "TAB" 'evil-buffer
                      "bD" 'kill-buffer-and-window)
#+END_SRC
   
** Popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (popwin-mode)
    (setq popwin:popup-window-height 25))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (use-package evil-smartparens
      :ensure t
      :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+END_SRC

   Remove "'" pair in emacs-lisp mode.
#+BEGIN_SRC emacs-lisp
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
#+END_SRC

   Disable highlighting in pairs.
#+BEGIN_SRC emacs-lisp
  (setq sp-highlight-pair-overlay nil)
  (setq sp-highlight-wrap-overlay nil)
  (setq sp-highlight-wrap-tag-overlay nil)
#+END_SRC

   Insert a new line and indent after opening brace.
#+BEGIN_SRC emacs-lisp
  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-pair "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
#+END_SRC 

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Relative Line Numbers
  In programming modes, I want relative line numbers enabled.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'linum-relative-mode)
#+END_SRC

  Setting the symbol for the current line as the empty string means that I can see the absolute line number for that line only.
#+BEGIN_SRC emacs-lisp
  (setq linum-relative-current-symbol ""))
#+END_SRC

** Default Style
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
#+END_SRC

** Help in echo area
#+BEGIN_SRC emacs-lisp
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.1)
  (help-at-pt-set-timer)
#+END_SRC

** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (do-smooth-scroll))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.5))
#+END_SRC

** Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Set Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome-stable")
#+END_SRC

** Scratch Buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message '"")
#+END_SRC

** Open Todo file on startup
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice "~/org/Todo.org")
#+END_SRC

** Disable lockfile/backup file creation
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
#+END_SRC

** Prevent emacs asking about running processes when quitting   
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
    "Prevent annoying \"Active processes exist\" query when you quit Emacs."
    (cl-letf (((symbol-function #'process-list) (lambda ())))
      ad-do-it))
#+END_SRC
