#+Title: Emacs Config

* Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (package-install 'use-package)
  (eval-when-compile (require 'use-package))
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

* Aesthetics
** Theme
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/hicksy-doom.el")
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme)
    (spaceline-info-mode t)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-buffer-size-off))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka-14")
  (set-frame-font "Iosevka-14" nil t)
#+END_SRC

* Magit/Version Control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

  (use-package evil-magit
    :ensure t)

  (setq auto-revert-check-vc-info t)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config

    (use-package flx
      :ensure t)

    (use-package ivy-xref
      :ensure t
      :config
      (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

    (ivy-mode)
    (setq ivy-height 12)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-use-virtual-buffers t)
    (setq ivy-virtual-abbreviate 'full)
    (setq ivy-use-selectable-prompt t)
    (setq helm-make-completion-method 'ivy)
    (setq ivy-extra-directories nil)
    (setq projectile-completion-system 'ivy)
    (setq ivy-switch-buffer-faces-alist nil)
    (setq ivy-dynamic-exhibit-delay-ms 200)
    (setq ivy-ignore-buffers '("\\` "
                               "\\`\\*magit-process"
                               "\\`\\*magit-diff"
                               "\\`\\*Flycheck"
                               "\\`\\*Shell Command Output"
                               "\\`\\*lsp"
                               "\\`\\*rdm"
                               "\\`\\*RTags Log")))

  (use-package counsel
    :ensure t
    :config
    (setq counsel-find-file-ignore-regexp "^.cquery"))

  (use-package counsel-projectile
    :ensure t)

  (use-package swiper
    :ensure t)

  (use-package helm-make
    :ensure t
    :defer t)
#+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.1)

    ;; (use-package company-childframe
    ;;   :ensure t
    ;;   :config (company-childframe-mode 1))

    (global-company-mode))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :config
    (projectile-mode)
    (add-to-list 'projectile-globally-ignored-directories "build/"))

  (defvar project-notes-file ".notes.org")

  (defun goto-project-notes()
    "Open the notes file associated with the current project. Set `project-notes-file` to change the file name."
    (interactive)
    (find-file (concat (projectile-project-root) project-notes-file)))
#+END_SRC

* Org
** Todo/Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/"))

  (use-package ivy-todo
    :ensure t
    :defer t
    :config (setq ivy-todo-file "~/org/Todo.org"))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file"~/org/Todo.org")
           "** TODO %?  %i\n  %a")))

  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

** Misc
Use org bullets package to get pretty bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

Enable syntax highlighting for org-mode source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Edit source block in current window rather than splitting
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Set all headings to be the same height/weight
#+BEGIN_SRC emacs-lisp
  (defun my/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC

Set applications for running stuff
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps '((auto-mode . emacs)
                       ("\\.mm\\'" . default)
                       ("\\.x?html?\\'" . "chromium")
                       ("\\.pdf\\'" . "zathura %s")))
#+END_SRC

Use listings package
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "listingsutf8"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted) 

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "indentfirst"))
  (add-to-list 'org-latex-packages-alist '("" "qtree"))
  (add-to-list 'org-latex-packages-alist '("" "lmodern"))
#+END_SRC

Turn on visual line mode in org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda() (visual-line-mode)))
#+END_SRC

Show inline images
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC

Remove unnecessary company backends
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local company-backends '((company-yasnippet company-dabbrev)))))
#+END_SRC

* LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :config
    (setq lsp-highlight-symbol-at-point nil)
    (require 'lsp-flycheck)
    (use-package company-lsp
      :ensure t
      :config
      (push 'company-lsp company-backends)))
      ;; (add-to-list 'company-backends '(company-lsp))))
#+END_SRC

* C/C++
** Packages
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :defer t)

  (use-package cmake-mode
    :ensure t
    :defer t)

  (use-package cquery
    :ensure t
    :config 
    (add-hook 'c-mode-hook (lambda() (lsp-cquery-enable)))
    (add-hook 'c++-mode-hook (lambda() (lsp-cquery-enable))))

  (use-package bison-mode
    :ensure t
    :defer t)
#+END_SRC

** Misc
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda () (setq flycheck-checker 'lsp)))
  (add-hook 'c-mode-hook (lambda() (flycheck-mode)))
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-checker 'lsp)))
  (add-hook 'c++-mode-hook (lambda() (flycheck-mode)))
#+END_SRC

* Asm
#+BEGIN_SRC emacs-lisp
  (add-hook 'asm-mode-hook (lambda() (local-set-key (kbd "RET") 'electric-indent-just-newline)))
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer t
    :config
    (setq rust-format-on-save t)
    (setq rust-rustfmt-bin "~/.cargo/bin/rustfmt"))

  (use-package cargo
    :ensure t
    :defer t)

  (use-package racer
    :ensure t
    :defer t
    :config
    (setq racer-cmd "/usr/local/bin/racer")
    (setq racer-rust-src-path "/usr/local/src/rust/src"))

  (use-package company-racer
    :ensure t
    :config (add-to-list 'company-backends 'company-racer))
    

  (use-package flycheck-rust
    :ensure t
    :defer t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    (add-hook 'rust-mode-hook (lambda() (flycheck-mode))))
#+END_SRC

* Java
** Eclim
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :defer t
    :config
    (setq eclim-eclipse-dirs "/usr/lib/eclipse"
          eclim-executable "/usr/lib/eclipse/eclim"))

  (use-package company-emacs-eclim
    :ensure t
    :config
    (company-emacs-eclim-setup)
    (add-hook 'java-mode-hook (lambda() (eclim-mode))))
#+END_SRC

** Gradle
#+BEGIN_SRC emacs-lisp
  (use-package gradle-mode
    :ensure t
    :defer t
    :config (add-hook 'java-mode-hook (lambda() (gradle-mode))))

  (use-package groovy-mode
    :ensure t
    :defer t)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda() (c-set-style "java")))
#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :defer t
    :config
    (setq haskell-interactive-popup-errors nil)

    ;;Stop the repl getting stuck
    (add-hook 'haskell-interactive-mode-hook
              (lambda ()
                (setq-local evil-move-cursor-back nil))))

  (use-package ghc
    :ensure t
    :defer t
    :config
    (autoload 'ghc-init "ghc" nil t)
    (autoload 'ghc-debug "ghc" nil t)
    (add-hook 'haskell-mode-hook (lambda () (ghc-init))))

  (use-package company-ghc
    :ensure t
    :config (add-to-list 'company-backends 'company-ghc))

  (use-package flycheck-haskell
    :ensure t
    :config
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

    (add-hook 'haskell-mode-hook (lambda () (flycheck-mode))))

  (use-package helm-ghc
    :ensure t
    :defer t)
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t)
#+END_SRC

* ERC
  Set the timestamp to be on the left and set every message to be timestamped
#+BEGIN_SRC emacs-lisp
  (setq erc-timestamp-only-if-changed-flag nil
            erc-timestamp-format "%H:%M "
            erc-fill-prefix "      "
            erc-insert-timestamp-function 'erc-insert-timestamp-left)
#+END_SRC

  Hide messages about people joining/leaving the room
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

  Set length of lines before they are split
#+BEGIN_SRC emacs-lisp
  (setq erc-fill-column 225)
#+END_SRC

* Misc
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (yas-global-mode))
#+END_SRC

** Safe Local Variables
#+BEGIN_SRC emacs-lisp
  (put 'helm-make-build-dir 'safe-local-variable 'stringp)
#+END_SRC

** Google This
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :defer t
    :config
    (google-this-mode))
#+END_SRC

** Recentf
#+BEGIN_SRC emacs-lisp
  (setq recentf-exclude '("^/var/folders\\.*"
                          "COMMIT_EDITMSG\\'"
                          ".*-autoloads\\.el\\'"
                          "[/\\]\\.elpa/"
                          ))
  (recentf-mode 1)
  (setq recentf-max-saved-items 500)
#+END_SRC

** Compilation
   Use ANSI colours in compilation.
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

   Scroll to first error
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

   Remove some unused keybindings in compilation mode.
#+BEGIN_SRC emacs-lisp
  (define-key compilation-mode-map (kbd "g") nil)
  (define-key compilation-mode-map (kbd "h") nil)
#+END_SRC
   
** Popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (popwin-mode)
    (setq popwin:popup-window-height 21)
    (add-to-list 'popwin:special-display-config '(cargo-process-mode :noselect t))
    (add-to-list 'popwin:special-display-config '(flycheck-error-list-mode :noselect t)))
    ;; (add-to-list 'popwin:special-display-config '(rtags-mode :noselect t)))
#+END_SRC

** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :defer t
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (setq sp-highlight-pair-overlay nil)
    (setq sp-highlight-wrap-overlay nil)
    (setq sp-highlight-wrap-tag-overlay nil)

    (defun my-create-newline-and-enter-sexp (&rest _ignored)
      "Open a new brace or bracket expression, with relevant newlines and indent. "
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))

    (sp-pair "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET"))))

  (use-package evil-smartparens
    :ensure t
    :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'linum-relative-mode)
    (add-hook 'conf-mode-hook 'linum-relative-mode)
    (setq linum-relative-current-symbol ""))
#+END_SRC

** Column Numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC

** Default Style
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
#+END_SRC

** Help in echo area
#+BEGIN_SRC emacs-lisp
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.1)
  (help-at-pt-set-timer)
#+END_SRC

** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (do-smooth-scroll))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.5))
#+END_SRC

** Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Set Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium")
#+END_SRC

** Scratch Buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message '"")
#+END_SRC

** Inhibit Startup Screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen 't)
#+END_SRC

** Disable lockfile/backup file creation
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
#+END_SRC

** Prevent emacs asking about running processes when quitting
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
    "Prevent annoying \"Active processes exist\" query when you quit Emacs."
    (cl-letf (((symbol-function #'process-list) (lambda ())))
      ad-do-it))
#+END_SRC

* Keybindings
I keep my keybindings in a seperate file, keys.org
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/keys.org")
#+END_SRC


