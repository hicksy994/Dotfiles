#+TITLE: Emacs Keybindings

* Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config 

    (use-package evil-surround
      :ensure t
      :config (global-evil-surround-mode 1))

    (use-package evil-goggles
      :ensure t
      :config
      (evil-goggles-mode))

    (use-package evil-escape
      :ensure t
      :config
      (evil-escape-mode)
      (setq evil-escape-key-sequence "jk"))

    (setq-default evil-shift-round 'nil)

    (use-package evil-commentary
      :ensure t
      :config (evil-commentary-mode))

    (evil-mode 1))
#+END_SRC

* Functions
   Define some functions to help with setting keybindings
#+BEGIN_SRC emacs-lisp
  (defun open-config-file()
    "Open my config file"
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun open-keys-file()
    "Open my keybindings file"
    (interactive)
    (find-file "~/.emacs.d/keys.org"))

  (defun open-todo-file()
    "Open my todo file"
    (interactive)
    (find-file "~/org/Todo.org"))

  (defun kill-buffer-and-window ()
    "Kill the current buffer and window in one step"
    (interactive)
    (kill-this-buffer)
    (evil-window-delete))
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  (setq my-leader "SPC")
  (setq my-major-mode-leader ",")

  (define-key evil-motion-state-map (kbd ",") 'nil)

  (setq space-bound-maps '(evil-motion-state-map
                           magit-status-mode-map
                           magit-revision-mode-map
                           magit-log-mode-map
                           magit-diff-mode-map
                           magit-process-mode-map
                           compilation-mode-map
                           help-mode-map))

  (dolist (element space-bound-maps)
    (define-key (symbol-value element) (kbd "SPC") 'nil))

  (use-package general
    :ensure t
    :config
    (setq general-default-keymaps '(evil-normal-state-map evil-motion-state-map)))
#+END_SRC

* Global
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-leader
                      "!" 'shell-command
                      "g" 'magit-status
                      "bd" 'kill-this-buffer
                      "bD" 'kill-buffer-and-window
                      "fc" 'open-config-file
                      "fk" 'open-keys-file
                      "ft" 'treemacs-toggle
                      "pt" 'treemacs-projectile-toggle
                      "ot" 'open-todo-file
                      "oT" 'ivy-todo
                      "TAB" 'evil-buffer)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-leader
                      "ff" 'counsel-find-file
                      "pp" 'counsel-projectile
                      "pf" 'counsel-projectile-find-file
                      "ps" 'counsel-projectile-ag
                      "s" 'swiper
                      "bb" 'ivy-switch-buffer
                      "bw" 'ivy-switch-buffer-other-window)

  (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (define-key ivy-minibuffer-map (kbd "C-h") 'counsel-up-directory)
  (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-partial-or-done)
  (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
  (use-package evil-org
    :ensure t)

  (general-define-key :prefix my-major-mode-leader
                      :keymaps 'org-mode-map
                      :states '(normal)
                      "a" 'org-archive-subtree
                      "d" 'org-deadline
                      "s" 'org-schedule
                      "p" 'org-pomodoro)

  (evil-define-key 'normal org-mode-map
    (kbd "RET") 'org-open-at-point)
#+END_SRC

* C/C++
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-major-mode-leader
                      :keymaps '(c-mode-map c++-mode-map)
                      :states '(normal)
                      "cc" 'helm-make-projectile
                      "cm" 'cmake-ide-run-cmake
                      "gg" 'rtags-find-symbol-at-point
                      "ga" 'projectile-find-other-file
                      "gA" 'projectile-find-other-file-other-window)
#+END_SRC

* Java
#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix my-major-mode-leader
                      :keymaps 'java-mode-map
                      :states '(normal)
                      "cc" 'gradle-build
                      "cx" 'gradle-execute
                      "ct" 'gradle-test
                      "ds" 'start-eclimd
                      "dk" 'stop-eclimd
                      "ec" 'eclim-problems-correct
                      "eb" 'eclim-problems
                      "gg" 'eclim-java-find-declaration)
#+END_SRC

* Misc
   Splitting and focusing in one step.
#+BEGIN_SRC emacs-lisp
  (defun evil-window-vsplit-and-focus ()
    "Split window vertically and move right to focus it"
    (interactive)
    (evil-window-vsplit)
    (other-window 1))

  (defun evil-window-split-and-focus ()
    "Split window vertically and move right to focus it"
    (interactive)
    (evil-window-split)
    (other-window 1))

  (define-key evil-normal-state-map (kbd "C-w C-v") 'evil-window-vsplit-and-focus)
  (define-key evil-normal-state-map (kbd "C-w C-s") 'evil-window-split-and-focus)

#+END_SRC
